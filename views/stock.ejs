<!DOCTYPE html>
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<style>
		html,body {
			height: 100%;
			background: #f5f5f5;
		}

		h1 {
			text-align: center;
		}
	</style>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css">
</head>
<html>
	<body>
		<div style="position: fixed; height: 100%; width: 100%; flex-direction: column; display: none; 
	justify-content: center; align-items: center; z-index: 3; background: rgba(0,0,0,.1);" id="menuOverlay">
			<div class="box" style="z-index: 3;">
			<button class="button is-danger" onclick="overlayToggle()">Close</button>
			<p>menus<p>
			</div>
		</div>
		<nav class="navbar is-fixed-top" role="navigation" aria-label="main navigation" style="display: flex; justify-content: space-around; background-color: rgba(255, 255, 255, .9); align-items: center; border-bottom:2px solid #ff3860">
			<a href="/" style="color: #ff3860;"><b>dsebd</b></a>
			<div id='status' style="">
				<b>Market Status: <span style="color: red;"><%=status%></span></b>
			</div>
			<button class="button is-danger" style="margin: 4px" onclick="overlayToggle()"><b>menu</b></button>
		</nav>
		<div class="column is-10 is-offset-1" id="main" style="margin-top: 52px">
			<div class="box" style="position: relative; background-color: white">
				<canvas id="chart"></canvas>
			</div>
			<h1 class="title" id="name">
				<%= data.name %>
			</h1>
		</div>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
		<script>
			let navMenuButton = document.querySelector('#navMenuButton');
			let menuOverlay = document.querySelector('#menuOverlay');
			let navBar = document.querySelector('nav');
			const ticker = document.getElementById('name');
			let blurFilter = document.querySelectorAll("body > :not(#menuOverlay)");

			const ctx = document.getElementById('chart').getContext('2d');
			let chartObject;
			let datasets;
			let chartLabel;
			let d_pc = 1;
			let d_mobile = 1;
			let url = 'https://dsebd.herokuapp.com/data'//remember to change when using loacalhost

			function overlayToggle() {
				if (menuOverlay.style.display == 'none') {
					menuOverlay.style.display = 'flex';
					for (var i = 0; i < blurFilter.length; i++) {
						blurFilter[i].style.filter = 'blur(3px)';
					}	
				} else {
					menuOverlay.style.display = 'none';
					for (var i = 0; i < blurFilter.length; i++) {
						blurFilter[i].style.filter = 'none';
					}
				}
				console.log(menuOverlay.style.display);
			}

			 chartObject = {
							// The type of chart we want to create
							type: 'line',

							// The data for our dataset
							data: {
								labels: [],
								datasets: [{
									label: ticker.innerText,
									backgroundColor: '#ff3860',
									borderColor: 'rgb(0,0,0)',
									data: [],
									fill: true,
									pointRadius:0,
									lineTension:1
								}]
							},

							// Configuration options go here
							options: {
								scales: {
									xAxes:[{
										scaleLabel:{
											display:true
										}
									}]
								}
								// scales: {
								// 	// xAxes: [{
								// 	// 	type: 'time',
								// 	// 	distribution: 'series'
								// 	// 	// ticks: {
								// 	// 	// 	source: 'labels'
								// 	// 	// }
								// 	// }],
								// 	xAxes: [{
								// 		scaleLabel: {
								// 			type: 'time',
								// 			display: true
								// 		}
								// 	}]
								// }
							}

						}
						
				let refresh = function() { fetch(url || 'http://loacalhost:3000/data')
					.then(function (response) {
						return response.json();
					})
					.then(function (data) {
						datasets = chartObject.data.datasets[0].data;
						chartLabel = chartObject.data.labels;
						data.forEach(element => {
							if (element[0] == ticker.innerText) {
								let newData = Number(element[1]);
								datasets.push(newData);
								let d = new Date();
								chartLabel.push(d.toLocaleTimeString());
								// console.log(typeof newData)
							}

							// let mq = window.matchMedia("(max-width: 570px)");
							// if (mq.matches && datasets.length > 5 ) {
							// 	// window width is at less than 500px
							// 	datasets.splice(1,1);
							// 	chartLabel.splice(1,1);
							// }
							// else if (!mq.matches && datasets.length > 11) {
							// 	// window width is greater than 500px
							// 	datasets.splice(1,1);
							// 	chartLabel.splice(1,1);
							// }
						});
						chart.update();
						// console.log(datasets);
					});
				}
				// refresh();
				let chart = new Chart(ctx, chartObject);
				refresh();
				setInterval(refresh, 20000);

				let status = document.querySelector('#status>b>span');
			// console.log(status);

			window.onload = function() {
				if (status.innerText != "Closed") {
					status.style.color = 'green';
				}
			}
		</script>
	</body>
</html>